     1                                  ; Daniel Mitchell
     2                                  ; P9 - Sort
     3                                  ; November 4, 2020
     4                                  ; CSC 245 def helped with this
     5                                  %macro	print	2
     6                                  	pusha
     7                                   	mov eax, 4
     8                                  	mov ebx, 1
     9                                  	mov ecx, %1
    10                                  	mov edx, %2
    11                                  	int 80h
    12                                  	popa
    13                                  %endmacro
    14                                  
    15                                  %macro printArray 1	;takes array len as input
    16                                  pusha	 
    17                                  mov	ecx, %1	
    18                                  mov	edx, 0
    19                                  call	_printArray
    20                                  popa
    21                                  %endmacro
    22                                  
    23                                  %macro printArray 2	;%1 is the array reference, %2 is the arraylen
    24                                  	mov ecx, %2
    25                                  	mov eax, %1
    26                                  	call _arrayPrinter
    27                                  %endmacro
    28                                  
    29                                  SECTION .data
    30                                  ; define data/variables here.  Think DB, DW, DD, DQ
    31 00000000 2020200A                output:	db	"   ", 10
    32 00000004 D2210501072A37          nums:	db	210, 33, 5, 1, 7, 42, 55
    33                                  numslen: EQU $-nums
    34 0000000B 0A                      ten:	db	10
    35 0000000C 64                      hundred:db	100
    36                                  
    37 0000000D 1B5B324A                clr	db	1bh,'[2J'
    38                                  
    39 00000011 4F726967696E616C20-     ogHeader: db	"Original Array", 10
    40 0000001A 41727261790A       
    41                                  oglen:	EQU $-ogHeader
    42                                  
    43 00000020 536F72746564204172-     sortedHeader: db	"Sorted Array", 10
    44 00000029 7261790A           
    45                                  sortedlen: EQU $-sortedHeader
    46                                  
    47                                  SECTION .bss
    48                                  ; define uninitialized data here
    49 00000000 <res 00000001>          key	resb 	1
    50                                  
    51                                  
    52                                  SECTION .text
    53                                  global _main
    54                                  _main:
    55 00000000 E8E7000000              call	_clrscr
    56                                  ; put your code here.
    57                                  print	ogHeader, oglen
    58 00000005 60                  <1>  pusha
    59 00000006 B804000000          <1>  mov eax, 4
    60 0000000B BB01000000          <1>  mov ebx, 1
    61 00000010 B9[11000000]        <1>  mov ecx, %1
    62 00000015 BA0F000000          <1>  mov edx, %2
    63 0000001A CD80                <1>  int 80h
    64 0000001C 61                  <1>  popa
    65                                  
    66                                  printArray	numslen
    67 0000001D 60                  <1> pusha
    68 0000001E B907000000          <1> mov ecx, %1
    69 00000023 BA00000000          <1> mov edx, 0
    70 00000028 E83B000000          <1> call _printArray
    71 0000002D 61                  <1> popa
    72 0000002E E885000000              call	_sortEm
    73                                  
    74                                  print 	sortedHeader, sortedlen
    75 00000033 60                  <1>  pusha
    76 00000034 B804000000          <1>  mov eax, 4
    77 00000039 BB01000000          <1>  mov ebx, 1
    78 0000003E B9[20000000]        <1>  mov ecx, %1
    79 00000043 BA0D000000          <1>  mov edx, %2
    80 00000048 CD80                <1>  int 80h
    81 0000004A 61                  <1>  popa
    82                                  printArray	numslen
    83 0000004B 60                  <1> pusha
    84 0000004C B907000000          <1> mov ecx, %1
    85 00000051 BA00000000          <1> mov edx, 0
    86 00000056 E80D000000          <1> call _printArray
    87 0000005B 61                  <1> popa
    88                                  
    89                                  lastBreak:
    90                                  ; Normal termination code
    91 0000005C B801000000              mov eax, 1
    92 00000061 BB00000000              mov ebx, 0
    93 00000066 CD80                    int 80h
    94                                  
    95                                  _printArray:
    96                                  top:
    97 00000068 8A82[04000000]          	mov al, [nums+edx]
    98 0000006E E81C000000              	call	_convert
    99                                  	print	output, 4
   100 00000073 60                  <1>  pusha
   101 00000074 B804000000          <1>  mov eax, 4
   102 00000079 BB01000000          <1>  mov ebx, 1
   103 0000007E B9[00000000]        <1>  mov ecx, %1
   104 00000083 BA04000000          <1>  mov edx, %2
   105 00000088 CD80                <1>  int 80h
   106 0000008A 61                  <1>  popa
   107 0000008B 42                      	inc edx
   108 0000008C E2DA                    loop top
   109                                  
   110                                  
   111 0000008E C3                      ret
   112                                  
   113                                  _convert:	;al should have byte number
   114 0000008F 60                      pusha
   115 00000090 BB[00000000]            mov	ebx, output	
   116 00000095 30E4                    xor	ah, ah		;clears ax so al has the number passed in
   117 00000097 F635[0C000000]          div	BYTE [hundred]  ;gets the car value
   118 0000009D 0430                    add	al, '0'
   119 0000009F 8803                    mov	[ebx], al
   120 000000A1 43                      inc	ebx
   121 000000A2 66C1E808                shr	ax, 8
   122 000000A6 F635[0B000000]          div	BYTE [ten]
   123 000000AC 0430                    add	al, '0'
   124 000000AE 8803                    mov	[ebx], al
   125 000000B0 80C430                  add	ah, '0'
   126 000000B3 43                      inc	ebx
   127 000000B4 8823                    mov	[ebx], ah
   128                                  
   129 000000B6 61                      popa 
   130 000000B7 C3                      ret
   131                                  
   132                                  _sortEm:	;implements a bubble sort on the array
   133 000000B8 60                      pusha
   134 000000B9 66B90700                mov	cx, numslen	;can't store ecx inside bx, but loop operator still counts it
   135 000000BD 6649                    dec	cx
   136                                  
   137                                  nextCheck:
   138 000000BF 6689CB                  mov	bx, cx
   139 000000C2 BE00000000              mov	esi, 0
   140                                  
   141                                  nextCompare:
   142 000000C7 8A86[04000000]          mov	al, [nums+esi]
   143 000000CD 8A96[05000000]          mov	dl, [nums+esi+1]
   144 000000D3 38D0                    cmp	al, dl
   145                                  
   146 000000D5 720C                    jc	noswap
   147                                  
   148 000000D7 8896[04000000]          mov	[nums+esi], dl
   149 000000DD 8886[05000000]          mov	[nums+esi+1], al
   150                                  
   151                                  noswap:
   152 000000E3 46                      inc	esi
   153 000000E4 664B                    dec	bx
   154 000000E6 75DF                    jnz	nextCompare
   155                                  
   156 000000E8 E2D5                    loop	nextCheck
   157                                  
   158 000000EA 61                      popa
   159 000000EB C3                      ret
   160                                  
   161                                  _clrscr:
   162 000000EC 60                      pusha
   163 000000ED B804000000              mov	eax, 4
   164 000000F2 BB01000000              mov	ebx, 1
   165 000000F7 B9[0D000000]            mov	ecx, clr
   166 000000FC BA04000000              mov	edx, 4
   167 00000101 CD80                    int	80h
   168 00000103 61                      popa
   169 00000104 C3                      ret
   170                                  
